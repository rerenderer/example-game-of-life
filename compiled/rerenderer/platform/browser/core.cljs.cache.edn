;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name rerenderer.platform.browser.core, :imports nil, :requires {platform rerenderer.platform.core, rerenderer.platform.core rerenderer.platform.core, rerenderer.platform.browser.interpreter rerenderer.platform.browser.interpreter, rerenderer.platform.browser.events rerenderer.platform.browser.events, r rerenderer.lang.core, rerenderer.lang.core rerenderer.lang.core, rerenderer.types.render-result rerenderer.types.render-result, rerenderer.types.component rerenderer.types.component, rerenderer.types.node rerenderer.types.node}, :uses {->RenderResult rerenderer.types.render-result, props rerenderer.types.component, bind-events! rerenderer.platform.browser.events, interpret! rerenderer.platform.browser.interpreter, IComponent rerenderer.types.component, Node rerenderer.types.node}, :defs {IBrowser {:meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/browser/core.cljs", :line 14, :column 14, :end-line 14, :end-column 22, :doc "Should be implemented for adding browser support to component.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {render-browser [[_ ctx]]}}}, :protocol-symbol true, :name rerenderer.platform.browser.core/IBrowser, :file "resources/public/compiled/rerenderer/platform/browser/core.cljs", :end-column 22, :column 1, :line 14, :protocol-info {:methods {render-browser [[_ ctx]]}}, :info nil, :end-line 14, :impls #{}, :doc "Should be implemented for adding browser support to component.", :jsdoc ("@interface")}, render-browser {:protocol-inline nil, :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/browser/core.cljs", :line 16, :column 4, :end-line 16, :end-column 18, :protocol rerenderer.platform.browser.core/IBrowser, :doc nil, :arglists (quote ([_ ctx]))}, :protocol rerenderer.platform.browser.core/IBrowser, :name rerenderer.platform.browser.core/render-browser, :variadic false, :file "resources/public/compiled/rerenderer/platform/browser/core.cljs", :end-column 18, :method-params ([_ ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ ctx])), :doc nil}, get-canvas {:protocol-inline nil, :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/browser/core.cljs", :line 18, :column 8, :end-line 18, :end-column 18, :private true, :arglists (quote ([options])), :doc "Return canvas from options or first canvas in the document."}, :private true, :name rerenderer.platform.browser.core/get-canvas, :variadic false, :file "resources/public/compiled/rerenderer/platform/browser/core.cljs", :end-column 18, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options])), :doc "Return canvas from options or first canvas in the document."}}, :require-macros {r rerenderer.lang.core, rerenderer.lang.core rerenderer.lang.core}, :cljs.analyzer/constants {:seen #{:y child :keyboard satisfies? :scale :browser :width :mouse parent :canvas instance? component IBrowser IComponent :x :input :height Node}, :order [:browser :canvas :scale satisfies? IComponent component IBrowser :width :height instance? Node child parent :x :y :input :keyboard :mouse]}, :doc nil}