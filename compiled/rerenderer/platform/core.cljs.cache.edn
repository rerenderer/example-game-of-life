;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name rerenderer.platform.core, :imports nil, :requires nil, :uses nil, :defs {platform {:name rerenderer.platform.core/platform, :file "resources/public/compiled/rerenderer/platform/core.cljs", :line 4, :column 1, :end-line 4, :end-column 14, :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/core.cljs", :line 4, :column 6, :end-line 4, :end-column 14}}, get-platform {:protocol-inline nil, :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/core.cljs", :line 6, :column 7, :end-line 6, :end-column 19, :arglists (quote ([]))}, :name rerenderer.platform.core/get-platform, :variadic false, :file "resources/public/compiled/rerenderer/platform/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, apply-script! {:name rerenderer.platform.core/apply-script!, :file "resources/public/compiled/rerenderer/platform/core.cljs", :line 10, :column 1, :end-line 10, :end-column 24, :doc "(script, root-canvas-id, options) -> null\n  Run script on platform side. final result of script on `root-canvas-id`.", :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/core.cljs", :line 10, :column 11, :end-line 10, :end-column 24, :doc "(script, root-canvas-id, options) -> null\n  Run script on platform side. final result of script on `root-canvas-id`."}}, listen! {:name rerenderer.platform.core/listen!, :file "resources/public/compiled/rerenderer/platform/core.cljs", :line 15, :column 1, :end-line 15, :end-column 18, :doc "(event-ch options) -> null\n  Should put events to `event-ch`, supported events:\n    - [:click {:x :y}]\n    - [:keydown {:keycode}]\n    - [:keyup {:keycode}]", :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/core.cljs", :line 15, :column 11, :end-line 15, :end-column 18, :doc "(event-ch options) -> null\n  Should put events to `event-ch`, supported events:\n    - [:click {:x :y}]\n    - [:keydown {:keycode}]\n    - [:keyup {:keycode}]"}}, render {:name rerenderer.platform.core/render, :file "resources/public/compiled/rerenderer/platform/core.cljs", :line 23, :column 1, :end-line 23, :end-column 17, :doc "(component) -> RenderResult", :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/core.cljs", :line 23, :column 11, :end-line 23, :end-column 17, :doc "(component) -> RenderResult"}}, render-to {:name rerenderer.platform.core/render-to, :file "resources/public/compiled/rerenderer/platform/core.cljs", :line 27, :column 1, :end-line 27, :end-column 20, :doc "(child-node, parent-node) -> script\n  Render child node on top of parent node", :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/core.cljs", :line 27, :column 11, :end-line 27, :end-column 20, :doc "(child-node, parent-node) -> script\n  Render child node on top of parent node"}}, information {:name rerenderer.platform.core/information, :file "resources/public/compiled/rerenderer/platform/core.cljs", :line 32, :column 1, :end-line 32, :end-column 22, :doc "Returns platform information in format:\n  {:width int-px\n   :height int-px\n   :input #{:mouse :keyboard :touch}}", :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/platform/core.cljs", :line 32, :column 11, :end-line 32, :end-column 22, :doc "Returns platform information in format:\n  {:width int-px\n   :height int-px\n   :input #{:mouse :keyboard :touch}}"}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:default :hierarchy}, :order [:hierarchy :default]}, :doc nil}