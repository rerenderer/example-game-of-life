;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name rerenderer.core, :imports nil, :requires {cljs.core.async cljs.core.async, rerenderer.platform.core rerenderer.platform.core, rerenderer.render rerenderer.render}, :uses {listen! rerenderer.platform.core, render-component! rerenderer.render, chan cljs.core.async, >! cljs.core.async, get-render-ch rerenderer.render, information rerenderer.platform.core}, :defs {Game {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rerenderer.core/Game, :file "resources/public/compiled/rerenderer/core.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 7, :record true, :end-line 7, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Game {:protocol-inline nil, :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/core.cljs", :line 7, :column 12, :end-line 7, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([state-atom initial-state platform-info render-ch event-ch]))}, :name rerenderer.core/->Game, :variadic false, :file "resources/public/compiled/rerenderer/core.cljs", :end-column 16, :method-params ([state-atom initial-state platform-info render-ch event-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 7, :end-line 7, :max-fixed-arity 5, :fn-var true, :arglists (quote ([state-atom initial-state platform-info render-ch event-ch]))}, map->Game {:protocol-inline nil, :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/core.cljs", :line 7, :column 12, :end-line 7, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__27325]))}, :name rerenderer.core/map->Game, :variadic false, :file "resources/public/compiled/rerenderer/core.cljs", :end-column 16, :method-params ([G__27325]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27325]))}, init! {:protocol-inline nil, :meta {:file "/home/nvbn/work/farley/org.rerenderer.game-of-life/resources/public/compiled/rerenderer/core.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([& {:keys [root-view event-handler state], :as options}])), :doc "Initializes new rerenderer application, required params:\n    - root-view - function for rendering root canvas - (fn [state options])\n    - event-handler - function for handling events - (fn [event-ch state-atom options])\n    - scale - true/false\n    - **options - additional platform/app-dependent options.\n\n  Returns Game record.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [root-view event-handler state], :as options})], :arglists ([& {:keys [root-view event-handler state], :as options}]), :arglists-meta (nil)}}, :name rerenderer.core/init!, :variadic true, :file "resources/public/compiled/rerenderer/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [root-view event-handler state], :as options})], :arglists ([& {:keys [root-view event-handler state], :as options}]), :arglists-meta (nil)}, :method-params [({:keys [root-view event-handler state], :as options})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [root-view event-handler state], :as options}]), :doc "Initializes new rerenderer application, required params:\n    - root-view - function for rendering root canvas - (fn [state options])\n    - event-handler - function for handling events - (fn [event-ch state-atom options])\n    - scale - true/false\n    - **options - additional platform/app-dependent options.\n\n  Returns Game record."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{event-ch initial-state :state-atom :event-handler :init :else state-atom map? :recur :state :platform-info :render :root-view :render-ch state platform-info ifn? :event-ch root-view :initial-state render-ch :platform}, :order [:state-atom :initial-state :platform-info :render-ch :event-ch state-atom initial-state platform-info render-ch event-ch :root-view :event-handler :state ifn? root-view map? state :platform :render :recur :else :init]}, :doc nil}